{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\fswiss\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\fmodern\fprq1\fcharset0 Liberation Mono{\*\falt Courier New};}{\f6\fnil\fprq0\fcharset0 Droid Sans Mono{\*\falt Courier New};}{\f7\fnil\fprq2\fcharset0 AR PL SungtiL GB;}{\f8\fmodern\fprq1\fcharset0 AR PL SungtiL GB;}{\f9\fnil\fprq2\fcharset0 Lohit Devanagari;}{\f10\fnil\fprq0\fcharset0 Lohit Devanagari;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red206\green24\blue30;\red255\green255\blue254;}
{\stylesheet{\s0\snext0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033 Normal;}
{\s2\sbasedon24\snext25\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36 Heading 2;}
{\*\cs15\snext15\cf9\ul\ulc0\langfe255\alang255\lang255 Internet Link;}
{\*\cs16\snext16 Index Link;}
{\*\cs17\snext17\b\ab Strong Emphasis;}
{\*\cs18\snext18\dbch\af8\dbch\af5\loch\f5 Source Text;}
{\*\cs19\snext19 Footnote Characters;}
{\*\cs20\snext20\super Footnote Anchor;}
{\*\cs21\snext21\i\ai Emphasis;}
{\*\cs22\snext22 Definition;}
{\*\cs23\snext23 Numbering Symbols;}
{\s24\sbasedon0\snext25\sb240\sa120\keepn\dbch\af7\dbch\af9\afs28\loch\f4\fs28 Heading;}
{\s25\sbasedon0\snext25\sl276\slmult1\sb0\sa140 Text Body;}
{\s26\sbasedon25\snext26\sl276\slmult1\sb0\sa140\dbch\af10 List;}
{\s27\sbasedon0\snext27\sb120\sa120\noline\i\dbch\af10\afs24\ai\fs24 Caption;}
{\s28\sbasedon0\snext28\noline\dbch\af10 Index;}
{\s29\sbasedon24\snext29\li0\ri0\lin0\rin0\fi0\sb240\sa120\keepn\noline\b\dbch\af7\dbch\af9\afs32\ab\loch\f4\fs32 Contents Heading;}
{\s30\sbasedon28\snext30\tldot\tqr\tx9689\noline\dbch\af10 Contents 2;}
{\s31\sbasedon0\snext31\sb0\sa0\dbch\af8\dbch\af5\afs20\loch\f5\fs20 Preformatted Text;}
{\s32\sbasedon0\snext32\li339\ri0\lin339\rin0\fi-339\noline\afs20\fs20 Footnote;}
{\s33\sbasedon0\snext33\tqc\tx4986\tqr\tx9972\noline Footer;}
{\s34\sbasedon0\snext34\li567\ri567\lin567\rin567\fi0\sb0\sa283 Quotations;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-397\li754}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-397\li1151}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-397\li1548}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-397\li1945}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-397\li2342}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-397\li2738}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-397\li3135}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-397\li3532}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-397\li3929}\listid2}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}{\*\generator LibreOffice/6.0.7.3$Linux_X86_64 LibreOffice_project/00m0$Build-3}{\info{\creatim\yr2019\mo5\dy1\hr8\min46}{\revtim\yr2019\mo5\dy13\hr0\min18}{\printim\yr0\mo0\dy0\hr0\min0}}{\*\userprops}\deftab420
\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1693\footery1134{\footer\pard\plain \s33\tqc\tx4986\tqr\tx9972\noline\qc{\rtlch \ltrch
{\field{\*\fldinst  PAGE }{\fldrslt 1}}}
\par }\pgdscnxt0 Default Style;}}
\formprot\formshade\paperh15840\paperw12240\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1693\footery1134{\footer\pard\plain \s33\tqc\tx4986\tqr\tx9972\noline\qc{\rtlch \ltrch
{\field{\*\fldinst  PAGE }{\fldrslt 1}}}
\par }\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc107_3160635490}{\*\bkmkend __RefHeading___Toc107_3160635490}\rtlch \ltrch\loch
Introduction to the Intermediate Algorithm Scripting Challenges}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
This is a stub introduction}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s29\li0\ri0\lin0\rin0\fi0\sb240\sa120\keepn\noline\b\dbch\af7\dbch\af9\afs32\ab\loch\f4\fs32{\rtlch \ltrch\loch
Table of Contents}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  1.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc107_3160635490" }{\fldrslt {\rtlch \ltrch\loch
Introduction to the Intermediate Algorithm Scripting Challenges\tab 1}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  2.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc109_3160635490" }{\fldrslt {\rtlch \ltrch\loch
Sum All Numbers in a Range\tab 1}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  3.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc393_615520890" }{\fldrslt {\rtlch \ltrch\loch
Diff Two Arrays\tab 2}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  4.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc395_615520890" }{\fldrslt {\rtlch \ltrch\loch
Seek and Destroy\tab 3}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  5.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc397_615520890" }{\fldrslt {\rtlch \ltrch\loch
Wherefore art thou\tab 4}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  6.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc633_1250153786" }{\fldrslt {\rtlch \ltrch\loch
Spinal Tap Case\tab 5}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  7.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc635_1250153786" }{\fldrslt {\rtlch \ltrch\loch
Pig Latin\tab 6}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  8.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1218_158707331" }{\fldrslt {\rtlch \ltrch\loch
Search and Replace\tab 8}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  9.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1220_158707331" }{\fldrslt {\rtlch \ltrch\loch
DNA Pairing\tab 9}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  10.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1222_158707331" }{\fldrslt {\rtlch \ltrch\loch
Missing letters\tab 11}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  11.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1249_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Sorted Union\tab 12}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  12.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1311_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Convert HTML Entities\tab 13}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  13.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1313_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Sum All Odd Fibonacci Numbers\tab 15}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  14.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1315_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Sum All Primes\tab 16}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  15.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1317_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Smallest Common Multiple\tab 18}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  16.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1319_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Drop it\tab 20}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  17.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1321_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Steamroller\tab 21}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  18.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1323_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Binary Agents\tab 22}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  19.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1325_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Everything Be True\tab 23}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  20.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1327_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Arguments Optional\tab 24}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  21.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1329_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Make a Person\tab 27}}}}
\par \pard\plain \s30\tldot\tqr\tx9689\noline\dbch\af10{\listtext\pard\plain  22.\tab}\ilvl0\ls2 \li754\ri0\lin754\rin0\fi-397\tldot\tqr\tx9689{{\field{\*\fldinst HYPERLINK "#__RefHeading___Toc1331_4188632738" }{\fldrslt {\rtlch \ltrch\loch
Map the Debris\tab 28}}}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc109_3160635490}{\*\bkmkend __RefHeading___Toc109_3160635490}\rtlch \ltrch\loch
Sum All Numbers in a Range}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
We'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The lowest number will not always come first.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function sumAll(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var sortedArr = arr.sort((a,b) => a-b);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var firstNum = arr[0];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var lastNum = arr[1];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Using Arithmetic Progression summing formula}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var sum = (lastNum - firstNum + 1) * (firstNum + lastNum) / 2;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return sum;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
sumAll([1, 4]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or :}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function sumAll(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var sortedArr = arr.sort((a,b) => a-b);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var firstNum = arr[0];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var lastNum = arr[1];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Using Arithmetic Progression summing formula}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
let temp=0;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
for (let i= firstNum; i<=lastNum;i++)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
temp=i+temp;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return temp;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc393_615520890}{\*\bkmkend __RefHeading___Toc393_615520890}\rtlch \ltrch\loch
Diff Two Arrays}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Remember to use }{{\field{\*\fldinst HYPERLINK "http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514" \\t "_blank" }{\fldrslt {\cf9\ul\ulc0\langfe255\alang255\lang255\rtlch \ltrch\loch
Read-Search-Ask}{}}}\rtlch \ltrch\loch
 if you get stuck. Try to pair program. Write your own code.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\cs17\b\ab\rtlch \ltrch\loch
Note}{\rtlch \ltrch\loch
\line You can return the array with its elements in any order.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf1\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
function diffArray(arr1, arr2) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf1\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
  }{\cf1\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
var newArr = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf1\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
  }{\cf1\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
// Same, same; but different.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf17\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
    }{\cf17\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
for (let i=0; i<arr1.length; i++)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf17\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
    }{\cf17\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
if (arr2.includes(arr1[i])==false) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf17\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
      }{\cf17\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
newArr.push(arr1[i]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf17\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
      }{\cf17\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf17\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
    }{\cf17\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf17\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
    }{\cf17\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
for (let j=0; j<arr2.length; j++)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf17\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
    }{\cf17\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
if (arr1.includes(arr2[j])==false) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf17\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
      }{\cf17\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
newArr.push(arr2[j]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf17\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
       }{\cf17\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf17\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
      }{\cf17\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf1\b0\highlight7\rtlch \ltrch\fs21\loch\f6\hich\af6
    }{\cf1\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
return newArr;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf1\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0\cf1\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\sl285\slmult0{\cf1\b0\highlight7\rtlch \ltrch\loch\fs21\loch\f6\hich\af6
diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or :}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
function diffArray(arr1, arr2) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
return arr1}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
.concat(arr2)}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
.filter(}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
item => !arr1.includes(item) || !arr2.includes(item)}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
)}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc395_615520890}{\*\bkmkend __RefHeading___Toc395_615520890}\rtlch \ltrch\loch
Seek and Destroy}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
You will be provided with an initial array (the first argument in the destroyer function), followed by one or more arguments. Remove all elements from the initial array that are of the same value as these arguments.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\cs17\b\ab\rtlch \ltrch\loch
Note}{\rtlch \ltrch\loch
\line You have to use the }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
arguments}{\rtlch \ltrch\loch
 object.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function destroyer(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Remove all the values}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var args = Array.prototype.slice.call(arguments);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
for (var i = 0; i < arr.length; i++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
for (var j = 0; j < args.length; j++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
if (arr[i] === args[j]) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
delete arr[i];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return arr.filter(Boolean);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
destroyer([1, 2, 3, 1, 2, 3], 2, 3);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or: }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function destroyer(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var args = Array.from(arguments).slice(1);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return arr.filter(function(val) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
return !args.includes(val);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc397_615520890}{\*\bkmkend __RefHeading___Toc397_615520890}\rtlch \ltrch\loch
Wherefore art thou}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Make a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the object from the collection if it is to be included in the returned array.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
For example, if the first argument is }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
[\{ first: "Romeo", last: "Montague" \}, \{ first: "Mercutio", last: null \}, \{ first: "Tybalt", last: "Capulet" \}]}{\rtlch \ltrch\loch
, and the second argument is }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
\{ last: "Capulet" \}}{\rtlch \ltrch\loch
, then you must return the third object from the array (the first argument), because it contains the name and its value, that was passed on as the second argument.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function whatIsInAName(collection, source) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// What's in a name?}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
var arr = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Only change code below this line}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var srcKeys = Object.keys(source);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// filter the collection}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return collection.filter(function (obj) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
for(var i = 0; i < srcKeys.length; i++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
if(!obj.hasOwnProperty(srcKeys[i]) || obj[srcKeys[i]] !== source[srcKeys[i]]) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
return false;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
return true;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Only change code above this line}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return arr;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
whatIsInAName([\{ first: "Romeo", last: "Montague" \}, \{ first: "Mercutio", last: null \}, \{ first: "Tybalt", last: "Capulet" \}], \{ last: "Capulet" \});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function whatIsInAName(collection, source) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// "What's in a name? that which we call a rose}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// By any other name would smell as sweet.\u8221\'94}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// -- by William Shakespeare, Romeo and Juliet}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var srcKeys = Object.keys(source);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return collection.filter(function (obj) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
return srcKeys.every(function (key) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
return obj.hasOwnProperty(key) && obj[key] === source[key];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function whatIsInAName(collection, source) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// "What's in a name? that which we call a rose}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// By any other name would smell as sweet.\u8221\'94}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// -- by William Shakespeare, Romeo and Juliet}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var srcKeys = Object.keys(source);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// filter the collection}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return collection.filter(function (obj) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
return srcKeys}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
.map(function(key) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
return obj.hasOwnProperty(key) && obj[key] === source[key];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\})}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
.reduce(function(a, b) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
return a && b;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc633_1250153786}{\*\bkmkend __RefHeading___Toc633_1250153786}\rtlch \ltrch\loch
Spinal Tap Case}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Convert a string to spinal case. Spinal case is all-lowercase-words-joined-by-dashes.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function spinalCase(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// "It's such a fine line between stupid, and clever."}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// --David St. Hubbins}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Create a variable for the white space and underscores.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var regex = /\\s+|_+/g;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Replace low-upper case to low-space-uppercase}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
str = str.replace(/([a-z])([A-Z])/g, '$1 $2');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Replace space and underscore with -}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return str.replace(regex, '-').toLowerCase();}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
spinalCase('This Is Spinal Tap');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function spinalCase(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Replace low-upper case to low-space-uppercase}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
str = str.replace(/([a-z])([A-Z])/g, '$1 $2');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Split on whitespace and underscores and join with dash}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return str.toLowerCase().split(/(?:_| )+/) .join('-');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function spinalCase(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// "It's such a fine line between stupid, and clever."}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// --David St. Hubbins}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return str.split(/\\s|_|(?=[A-Z])/).join('-').toLowerCase()}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc635_1250153786}{\*\bkmkend __RefHeading___Toc635_1250153786}\rtlch \ltrch\loch
Pig Latin}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Translate the provided string to pig latin.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{{\field{\*\fldinst HYPERLINK "http://en.wikipedia.org/wiki/Pig_Latin" \\t "_blank" }{\fldrslt {\cf9\ul\ulc0\langfe255\alang255\lang255\rtlch \ltrch\loch
Pig Latin}{}}}\rtlch \ltrch\loch
 takes the first consonant (or consonant cluster) of an English word, moves it to the end of the word and suffixes an "ay".}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
If a word begins with a vowel you just add "way" to the end.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Input strings are guaranteed to be English words in all lowercase.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function translatePigLatin(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\cf17\rtlch \ltrch
 }{\cf17\rtlch \ltrch\loch
// Create variables to be used}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var pigLatin = '';}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var regex = /[aeiou]/gi;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Check if the first character is a vowel}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
if (str[0].match(regex)) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
pigLatin = str + 'way';}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\} else if(str.match(regex) === null) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
// Check if the string contains only consonants}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
pigLatin = str + 'ay';}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\} else \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
// Find how many consonants before the first vowel.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var vowelIndice = str.indexOf(str.match(regex)[0]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
// Take the string from the first vowel to the last char}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
// then add the consonants that were previously omitted and add the ending.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
pigLatin = str.substr(vowelIndice) + str.substr(0, vowelIndice) + 'ay';}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return pigLatin;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
translatePigLatin("consonant");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function translatePigLatin(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
function check(obj) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
return ['a','i','u','e','o'].indexOf(str.charAt(obj)) == -1 ? check(obj + 1) : obj;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return str.substr(check(0)).concat((check(0) === 0 ? 'w' : str.substr(0, check(0))) + 'ay');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function translatePigLatin(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
var strArr = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
var tmpChar;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// check if the char is consonant using RegEx}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
function isConsonant(char) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
return !/[aeiou]/.test(char);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// return initial str + "way" if it starts with vowel}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// if not - convert str to array}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
if (!isConsonant(str.charAt(0)))}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
return str + "way";}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
else}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
strArr = str.split("");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// push all consonats to the end of the array}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
while (isConsonant(strArr[0])) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
tmpChar = strArr.shift();}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
strArr.push(tmpChar);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\rtlch \ltrch\loch
// convert array to string and concatenate "ay" at the end  }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\rtlch \ltrch\loch
return strArr.join("")+"ay";}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1218_158707331}{\*\bkmkend __RefHeading___Toc1218_158707331}\rtlch \ltrch\loch
Search and Replace}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Perform a search and replace on the sentence using the arguments provided and return the new sentence.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
First argument is the sentence to perform the search and replace on.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Second argument is the word that you will be replacing (before).}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Third argument is what you will be replacing the second argument with (after).}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\cs17\b\ab\rtlch \ltrch\loch
Note}{\rtlch \ltrch\loch
\line Preserve the case of the first character in the original word when you are replacing it. For example if you mean to replace the word "Book" with the word "dog", it should be replaced as "Dog"}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function myReplace(str, before, after) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Find index where before is on string}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var index = str.indexOf(before);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Check to see if the first letter is uppercase or not}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
if (str[index] === str[index].toUpperCase()) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
// Change the after word to be capitalized before we use it.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
after = after.charAt(0).toUpperCase() + after.slice(1);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Now replace the original str with the edited one.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
str = str.replace(before, after);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return str;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
// test here}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function myReplace(str, before, after) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
//Create a regular expression object}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
var re = new RegExp(before,"gi");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
//Check whether the first letter is uppercase or not}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
if(/[A-Z]/.test(before[0]))\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
//Change the word to be capitalized}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
after = after.charAt(0).toUpperCase()+after.slice(1);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
     }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
     }{\rtlch \ltrch\loch
//Replace the original word with new one}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
var  newStr =  str.replace(re,after);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\rtlch \ltrch\loch
return newStr;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function myReplace(str, before, after) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// create a function that will change the casing of any number of letter in parameter "target"}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// matching parameter "source"}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
function applyCasing(source, target) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
// split the source and target strings to array of letters}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
var targetArr = target.split("");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
var sourceArr = source.split("");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
// iterate through all the items of sourceArr and targetArr arrays till loop hits the end of shortest array}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
for (var i = 0; i < Math.min(targetArr.length, sourceArr.length); i++)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
// find out the casing of every letter from sourceArr using regular expression}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
// if sourceArr[i] is upper case then convert targetArr[i] to upper case}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
if (/[A-Z]/.test(sourceArr[i])) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
                }{\rtlch \ltrch\loch
targetArr[i] = targetArr[i].toUpperCase();}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
// if sourceArr[i] is not upper case then convert targetArr[i] to lower case}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
else targetArr[i] = targetArr[i].toLowerCase();}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
// join modified targetArr to string and return}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
return (targetArr.join(""));}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// replace "before" with "after" with "before"-casing}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return str.replace(before, applyCasing(before, after));}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1220_158707331}{\*\bkmkend __RefHeading___Toc1220_158707331}\rtlch \ltrch\loch
DNA Pairing}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The DNA strand is missing the pairing element. Take each character, get its pair, and return the results as a 2d array.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{{\field{\*\fldinst HYPERLINK "http://en.wikipedia.org/wiki/Base_pair" \\t "_blank" }{\fldrslt {\cf9\ul\ulc0\langfe255\alang255\lang255\rtlch \ltrch\loch
Base pairs}{}}}\rtlch \ltrch\loch
 are a pair of AT and CG. Match the missing element to the provided character.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Return the provided character as the first element in each array.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
For example, for the input GCG, return [["G", "C"], ["C","G"],["G", "C"]]}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The character and its pair are paired up in an array, and all the arrays are grouped into one encapsulating array.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function pairElement(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
   }{\rtlch \ltrch\loch
// Return each strand as an array of two elements, the original and the pair.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
var paired = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
// Function to check with strand to pair.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
var search = function(char) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
switch (char) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
case 'A':}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
paired.push(['A', 'T']);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
break;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
case 'T':}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
paired.push(['T', 'A']);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
break;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
case 'C':}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
paired.push(['C', 'G']);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
break;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
case 'G':}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
paired.push(['G', 'C']);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
break;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
// Loops through the input and pair.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
for (var i = 0; i < str.length; i++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
search(str[i]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
return paired;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
pairElement("GCG");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function pairElement(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
//create object for pair lookup}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
var pairs = \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
"A": "T",}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
"T": "A",}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
"C": "G",}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
"G": "C"}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
//split string into array of characters}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
var arr = str.split("");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
//map character to array of character and matching pair}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return arr.map(x => [x,pairs[x]]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
//test here}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
pairElement("GCG");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1222_158707331}{\*\bkmkend __RefHeading___Toc1222_158707331}\rtlch \ltrch\loch
Missing letters}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Find the missing letter in the passed letter range and return it.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
If all letters are present in the range, return undefined.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function fearNotLetter(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
   }{\cf17\rtlch \ltrch\loch
for(var i = 0; i < str.length; i++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
/* code of current character */}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var code = str.charCodeAt(i);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
/* if code of current character is not equal to first character + no of iteration}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
hence character has been escaped */}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
if (code !== str.charCodeAt(0) + i) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
/* if current character has escaped one character find previous char and return */}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
return String.fromCharCode(code - 1);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\}  }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return undefined;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
fearNotLetter("abce");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function fearNotLetter(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
var compare = str.charCodeAt(0), missing;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
str.split('').map(function(letter,index) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
if (str.charCodeAt(index) == compare) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
++compare;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\} else \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
missing = String.fromCharCode(compare);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return missing;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function fearNotLetter(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
for (let i = 1; i < str.length; ++i) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
if (str.charCodeAt(i) - str.charCodeAt(i-1) > 1) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
return String.fromCharCode(str.charCodeAt(i - 1) + 1);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1249_4188632738}{\*\bkmkend __RefHeading___Toc1249_4188632738}\rtlch \ltrch\loch
Sorted Union}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Write a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
In other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Check the assertion tests for examples.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function uniteUnique(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Creates an empty array to store our final result.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var finalArray = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Loop through the arguments object to truly made the program work with two or more arrays}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// instead of 3.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
for (var i = 0; i < arguments.length; i++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var arrayArguments = arguments[i];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
// Loops through the array at hand}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
for (var j = 0; j < arrayArguments.length; j++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
var indexValue = arrayArguments[j];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
// Checks if the value is already on the final array.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
if (finalArray.indexOf(indexValue) < 0) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
finalArray.push(indexValue);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return finalArray;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function uniteUnique(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var args = [...arguments];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var result = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
for(var i = 0; i < args.length; i++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
for(var j = 0; j < args[i].length; j++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
       }{\cf17\rtlch \ltrch\loch
if(!result.includes(args[i][j])) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
result.push(args[i][j]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return result;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function uniteUnique(arr1, arr2, arr3) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
 }{\cf17\rtlch \ltrch\loch
var newArr;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
 }{\cf17\rtlch \ltrch\loch
//Convert the arguments object into an array}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var args = Array.prototype.slice.call(arguments);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
//Use reduce function to flatten the array}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
newArr = args.reduce(function(arrA,arrB)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
//Apply filter to remove the duplicate elements in the array}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
return arrA.concat(arrB.filter(function(i)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
return arrA.indexOf(i) === -1;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\}));}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
   }{\cf17\rtlch \ltrch\loch
return newArr;                    }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1311_4188632738}{\*\bkmkend __RefHeading___Toc1311_4188632738}\rtlch \ltrch\loch
Convert HTML Entities}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Convert the characters }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
&}{\rtlch \ltrch\loch
, }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
<}{\rtlch \ltrch\loch
, }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
>}{\rtlch \ltrch\loch
, }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
"}{\rtlch \ltrch\loch
 (double quote), and }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
'}{\rtlch \ltrch\loch
 (apostrophe), in a string to their corresponding HTML entities.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function convertHTML(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
// Split by character to avoid problems.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
var temp = str.split('');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
// Since we are only checking for a few HTML elements I used a switch}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
for (var i = 0; i < temp.length; i++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
switch (temp[i]) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
case '<':}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
temp[i] = '&lt;';}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
break;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
case '&':}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
temp[i] = '&amp;';}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
break;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
case '>':}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
temp[i] = '&gt;';}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
break;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
case '"':}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
temp[i] = '&quot;';}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
break;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
case "'":}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
temp[i] = "&apos;";}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
break;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
temp = temp.join('');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
return temp;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
convertHTML("Dolce & Gabbana");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function convertHTML(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
//Chaining of replace method with different arguments}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
str = str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,"&apos;");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
return str;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function convertHTML(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
// Use Object Lookup to declare as many HTML entities as needed.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
htmlEntities=\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
'&':'&amp;',}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
'<':'&lt;',}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
'>':'&gt;',}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
'"':'&quot;',}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
'\\'':"&apos;"}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
//Use map function to return a filtered str with all entities changed automatically.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
return str.split('').map(entity => htmlEntities[entity] || entity).join('');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1313_4188632738}{\*\bkmkend __RefHeading___Toc1313_4188632738}\rtlch \ltrch\loch
Sum All Odd Fibonacci Numbers}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Given a positive integer }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
num}{\rtlch \ltrch\loch
, return the sum of all odd Fibonacci numbers that are less than or equal to }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
num}{\rtlch \ltrch\loch
.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The first two numbers in the Fibonacci sequence are 1 and 1. Every additional number in the sequence is the sum of the two previous numbers. The first six numbers of the Fibonacci sequence are 1, 1, 2, 3, 5 and 8.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
For example, }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
sumFibs(10)}{\rtlch \ltrch\loch
 should return }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
10}{\rtlch \ltrch\loch
 because all odd Fibonacci numbers less than or equal to }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
10}{\rtlch \ltrch\loch
 are 1, 1, 3, and 5.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function sumFibs(num) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var prevNumber = 0;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var currNumber = 1;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var result = 0;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
while (currNumber <= num) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
if (currNumber % 2 !== 0) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
result += currNumber;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
currNumber += prevNumber;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
prevNumber = currNumber - prevNumber;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
return result;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
sumFibs(4);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function sumFibs(num) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// Perform checks for the validity of the input}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
if (num < 0) return -1;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
if (num === 0 || num === 1) return 1;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// Create an array of fib numbers till num}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
const arrFib = [1, 1];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
let nextFib = 0;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// We put the new Fibonacci numbers to the front so we}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// don't need to calculate the length of the array on each}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// iteration}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
while((nextFib = arrFib[0] + arrFib[1]) <= num) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
arrFib.unshift(nextFib);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// Sum only the odd numbers and return the value}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return arrFib.reduce((acc, curr) => \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
return acc + curr * (curr % 2);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1315_4188632738}{\*\bkmkend __RefHeading___Toc1315_4188632738}\rtlch \ltrch\loch
Sum All Primes}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Sum all the prime numbers up to and including the provided number.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
A prime number is defined as a number greater than one and having only two divisors, one and itself. For example, 2 is a prime number because it's only divisible by one and two.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The provided number may not be a prime.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function sumPrimes(num) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var res = 0;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Function to get the primes up to max in an array}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
function getPrimes(max) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var sieve = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var i;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var j;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var primes = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
for (i = 2; i <= max; ++i) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
if (!sieve[i]) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
// i has not been marked -- it is prime}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
primes.push(i);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
for (j = i << 1; j <= max; j += i) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
sieve[j] = true;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
return primes;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Add the primes}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var primes = getPrimes(num);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
for (var p = 0; p < primes.length; p++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
res += primes[p];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return res;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
sumPrimes(10);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function sumPrimes(num) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// function to check if the number presented is prime}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
function isPrime(number)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
for (i = 2; i <= number; i++)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
if(number % i === 0 && number!= i)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
// return true if it is divisible by any number that is not itself.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
             }{\rtlch \ltrch\loch
return false;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
       }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
       }{\rtlch \ltrch\loch
// if it passes the for loops conditions it is a prime}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
return true;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// 1 is not a prime, so return nothing, also stops the recursive calls.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
if (num === 1)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return 0;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Check if your number is not prime}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
if(isPrime(num) === false)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// for non primes check the next number down from your maximum number, do not add anything to your answer}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return sumPrimes(num - 1);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Check if your number is prime}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
if(isPrime(num) === true)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// for primes add that number to the next number in the sequence through a recursive call to our sumPrimes function.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return num + sumPrimes(num - 1);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1317_4188632738}{\*\bkmkend __RefHeading___Toc1317_4188632738}\rtlch \ltrch\loch
Smallest Common Multiple}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The range will be an array of two numbers that will not necessarily be in numerical order.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all numbers }{\cs21\i\ai\rtlch \ltrch\loch
between}{\rtlch \ltrch\loch
 1 and 3. The answer here would be 6.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function smallestCommons(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Sort array from greater to lowest}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// This line of code was from Adam Doyle (http://github.com/Adoyle2014)}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\cf17\rtlch \ltrch
 }{\cf17\rtlch \ltrch\loch
arr.sort(function(a, b) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
return b - a;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Create new array and add all values from greater to smaller from the}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// original array.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var newArr = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
for (var i = arr[0]; i >= arr[1]; i--) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
newArr.push(i);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Variables needed declared outside the loops.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var quot = 0;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var loop = 1;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var n;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Run code while n is not the same as the array length.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
do \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
quot = newArr[0] * loop * newArr[1];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
for (n = 2; n < newArr.length; n++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
if (quot % newArr[n] !== 0) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
break;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
loop++;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\} while (n !== newArr.length);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return quot;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
smallestCommons([1,5]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function smallestCommons(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
var range = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
for (var i = Math.max(arr[0], arr[1]); i >= Math.min(arr[0], arr[1]); i--) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
range.push(i);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// can use reduce() in place of this block}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
var lcm = range[0];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
for (i = 1; i < range.length; i++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
var GCD = gcd(lcm, range[i]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
lcm = (lcm * range[i]) / GCD;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return lcm;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
function gcd(x, y) \{    // Implements the Euclidean Algorithm}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
if (y === 0)}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
return x;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
else}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
return gcd(y, x%y);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function smallestCommons(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// range}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
let min = Math.min.apply(null, arr);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
let max = Math.max.apply(null, arr);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
let smallestCommon = lcm(min, min + 1);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
while(min < max) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
min++;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
smallestCommon = lcm(smallestCommon, min);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return smallestCommon;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
/**}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\rtlch \ltrch\loch
* Calculates Greatest Common Divisor}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\rtlch \ltrch\loch
* of two nubers using Euclidean algorithm}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\rtlch \ltrch\loch
* https://en.wikipedia.org/wiki/Euclidean_algorithm}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\rtlch \ltrch\loch
*/}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function gcd(a, b) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
while (b > 0) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
let tmp = a;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
a = b;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
b = tmp % b;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return a;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
/**}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\rtlch \ltrch\loch
* Calculates Least Common Multiple}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\rtlch \ltrch\loch
* for two numbers utilising GCD}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\rtlch \ltrch\loch
*/}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function lcm(a, b) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return (a * b / gcd(a, b));}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1319_4188632738}{\*\bkmkend __RefHeading___Toc1319_4188632738}\rtlch \ltrch\loch
Drop it}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Given the array }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
arr}{\rtlch \ltrch\loch
, iterate through and remove each element starting from the first element (the 0 index) until the function }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
func}{\rtlch \ltrch\loch
 returns }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
true}{\rtlch \ltrch\loch
 when the iterated element is passed through it.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Then return the rest of the array once the condition is satisfied, otherwise, }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
arr}{\rtlch \ltrch\loch
 should be returned as an empty array.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function dropElements(arr, func) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Drop them elements.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
var times = arr.length;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
for (var i = 0; i < times; i++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
if (func(arr[0])) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
break;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\} else \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
arr.shift();}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return arr;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
dropElements([1, 2, 3], function(n) \{return n < 3; \});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function dropElements(arr, func) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return arr.slice(arr.findIndex(func) >= 0 ? arr.findIndex(func): arr.length, arr.length);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function dropElements(arr, func) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
while(arr.length > 0 && !func(arr[0])) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
arr.shift();}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return arr;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1321_4188632738}{\*\bkmkend __RefHeading___Toc1321_4188632738}\rtlch \ltrch\loch
Steamroller}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Flatten a nested array. You must account for varying levels of nesting.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function steamrollArray(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// I'm a steamroller, baby}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var flattenedArray = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Create function that adds an element if it is not an array.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// If it is an array, then loops through it and uses recursion on that array.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var flatten = function(arg) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
if (!Array.isArray(arg)) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
flattenedArray.push(arg);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\} else \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
for (var a in arg) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
flatten(arg[a]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Call the function for each element in the array}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
arr.forEach(flatten);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return flattenedArray;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
steamrollArray([1, [2], [3, [[4]]]]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function steamrollArray(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
let flat = [].concat(...arr);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return flat.some(Array.isArray) ? steamrollArray(flat) : flat;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function steamrollArray(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return arr.toString()}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
.replace(',,', ',')       // "1,2,,3" => "1,2,3"}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
.split(',')               // ['1','2','3']}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
.map(function(v) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
if (v == '[object Object]') \{ // bring back empty objects}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
return \{\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
\} else if (isNaN(v)) \{        // if not a number (string)}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
return v;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
\} else \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
return parseInt(v);         // if a number in a string, convert it}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1323_4188632738}{\*\bkmkend __RefHeading___Toc1323_4188632738}\rtlch \ltrch\loch
Binary Agents}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Return an English translated sentence of the passed binary string.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The binary string will be space separated.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function binaryAgent(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
   }{\cf17\rtlch \ltrch\loch
let biString = str.split(' ');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
let uniString = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
/*using the radix (or base) parameter in parseInt, we can convert the binary}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
number to a decimal number while simultaneously converting to a char*/}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
for(let i=0;i < biString.length;i++)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
uniString.push(String.fromCharCode(parseInt(biString[i], 2)));}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
// we then simply join the string}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
return uniString.join('');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
binaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function binaryAgent(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
// Separate the binary code by space.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
str = str.split(' ');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
var power;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
var decValue = 0;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
var sentence = '';}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
// Check each binary number from the array.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
for (var s = 0; s < str.length; s++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
// Check each bit from binary number}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
for (var t = 0; t < str[s].length; t++) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
// This only takes into consideration the active ones.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
if (str[s][t] == 1) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
// This is quivalent to 2 ** position}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
power = Math.pow(2, +str[s].length - t - 1);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
decValue += power;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
// Record the decimal value by adding the number to the previous one.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
// After the binary number is converted to decimal, convert it to string and store}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
sentence += (String.fromCharCode(decValue));}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
// Reset decimal value for next binary number.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
decValue = 0;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
return sentence;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function binaryAgent(str) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
return String.fromCharCode(...str.split(" ").map(function(char)\{ return parseInt(char, 2); \}));}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1325_4188632738}{\*\bkmkend __RefHeading___Toc1325_4188632738}\rtlch \ltrch\loch
Everything Be True}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Check if the predicate (second argument) is }{\cs22\rtlch \ltrch\loch
truthy}{\rtlch \ltrch\loch
 on all elements of a collection (first argument).}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
In other words, you are given an array collection of objects. The predicate }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
pre}{\rtlch \ltrch\loch
 will be an object property and you need to return }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
true}{\rtlch \ltrch\loch
 if its value is }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
truthy}{\rtlch \ltrch\loch
. Otherwise, return }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
false}{\rtlch \ltrch\loch
.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
In JavaScript, }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
truthy}{\rtlch \ltrch\loch
 values are values that translate to }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
true}{\rtlch \ltrch\loch
 when evaluated in a Boolean context.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Remember, you can access object properties through either dot notation or }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
[]}{\rtlch \ltrch\loch
 notation.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function truthCheck(collection, pre) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Is everyone being true?}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Create a counter to check how many are true.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var counter = 0;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Check for each object}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
for (var c in collection) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
// If it is has property and value is truthy}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
if (collection[c].hasOwnProperty(pre) && Boolean(collection[c][pre])) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
counter++;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
// Outside the loop, check to see if we got true for all of them and return true or false}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return counter == collection.length;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
truthCheck([\{"user": "Tinky-Winky", "sex": "male"\}, \{"user": "Dipsy", "sex": "male"\}, \{"user": "Laa-Laa", "sex": "female"\}, \{"user": "Po", "sex": "female"\}], "sex");}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function truthCheck(collection, pre) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return collection.every(function (element) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return element.hasOwnProperty(pre) && Boolean(element[pre]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function truthCheck(collection, pre) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Is everyone being true?}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return collection.every(obj => obj[pre]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1327_4188632738}{\*\bkmkend __RefHeading___Toc1327_4188632738}\rtlch \ltrch\loch
Arguments Optional}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Create a function that sums two arguments together. If only one argument is provided, then return a function that expects one argument and returns the sum.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
For example, }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
addTogether(2, 3)}{\rtlch \ltrch\loch
 should return }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
5}{\rtlch \ltrch\loch
, and }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
addTogether(2)}{\rtlch \ltrch\loch
 should return a function.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Calling this returned function with a single argument will then return the sum:}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
var sumTwoAnd = addTogether(2);}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
sumTwoAnd(3)}{\rtlch \ltrch\loch
 returns }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
5}{\rtlch \ltrch\loch
.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
If either argument isn't a valid number, return undefined.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function addTogether() \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Function to check if a number is actually a number}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
// and return undefined otherwise.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
var checkNum = function(num) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
if (typeof num !== 'number') \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
return undefined;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
\} else}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
return num;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
// Check if we have two parameters, check if they are numbers}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
// handle the case where one is not}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
// returns the addition.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
if (arguments.length > 1) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
var a = checkNum(arguments[0]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
var b = checkNum(arguments[1]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
if (a === undefined || b === undefined) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
return undefined;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
\} else \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
return a + b;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\} else \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
// If only one parameter was found, returns a new function that expects two}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
// Store first argument before entering the new function scope}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
var c = arguments[0];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
// Check the number again, must be outside the function to about returning an object}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
// instead of undefined.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
if (checkNum(c)) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
// Return function that expect a second argument.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
return function(arg2) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
// Check for non-numbers}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
if (c === undefined || checkNum(arg2) === undefined) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
              }{\cf17\rtlch \ltrch\loch
return undefined;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
\} else \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
              }{\cf17\rtlch \ltrch\loch
// if numbers then add them.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
              }{\cf17\rtlch \ltrch\loch
return c + arg2;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
            }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
          }{\cf17\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
        }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
      }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
addTogether(2,3);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function addTogether() \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
var args = new Array(arguments.length);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
//Storing the arguments in an array}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
for(var i = 0; i < args.length; ++i) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
args[i] = arguments[i];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
     }{\rtlch \ltrch\loch
//Check for the arguments length}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
     }{\rtlch \ltrch\loch
if(args.length == 2)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
//If there are two arguments,check for the type of both arguments}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
//Use typeof to check the type of the argument(both should be numbers)}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
if(typeof args[0] !== 'number' || typeof args[1] !=='number' )\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
return undefined;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
return args[0]+args[1];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
       }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
     }{\rtlch \ltrch\loch
//When only one argument is provided}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
     }{\rtlch \ltrch\loch
if(args.length == 1)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
         }{\rtlch \ltrch\loch
a= args[0];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
         }{\rtlch \ltrch\loch
//Check the  argument using typeof }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
if(typeof a!=='number')\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
return undefined;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
else\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
           }{\rtlch \ltrch\loch
//Making use of closures }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
           }{\rtlch \ltrch\loch
return function(b)\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
           }{\rtlch \ltrch\loch
//Checking the second argument }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
             }{\rtlch \ltrch\loch
if(typeof b !=='number')\{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
               }{\rtlch \ltrch\loch
return undefined;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
               }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
             }{\rtlch \ltrch\loch
else}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
               }{\rtlch \ltrch\loch
return a+b;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
              }{\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\rtlch \ltrch\loch
//jshint esversion: 6}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
function addTogether() \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
var args = Array.from(arguments);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
return args.some(n => typeof n !== 'number') ? }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
undefined: }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
        }{\rtlch \ltrch\loch
args.length > 1 ?}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
args.reduce((acc, n) => acc += n, 0):}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
(n) => typeof n === "number" ? }
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
n + args[0]:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
            }{\rtlch \ltrch\loch
undefined;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1329_4188632738}{\*\bkmkend __RefHeading___Toc1329_4188632738}\rtlch \ltrch\loch
Make a Person}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Fill in the object constructor with the following methods below:}
\par \pard\plain \s34\li567\ri567\lin567\rin567\fi0\sb0\sa283{\rtlch \ltrch\loch
getFirstName() getLastName() getFullName() setFirstName(first) setLastName(last) setFullName(firstAndLast)}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Run the tests to see the expected output for each method.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The methods that take an argument must accept only one argument and it has to be a string.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
These methods must be the only available means of interacting with the object.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
var Person = function(firstAndLast) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Complete the method below and implement the others similarly}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
var fullName = firstAndLast;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
this.getFirstName = function() \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return fullName.split(" ")[0];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
this.getLastName = function() \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return fullName.split(" ")[1];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
this.getFullName = function() \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return fullName;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
this.setFirstName = function(name) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
fullName = name + " " + fullName.split(" ")[1];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
this.setLastName = function(name) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
fullName = fullName.split(" ")[0] + " " + name;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
this.setFullName = function(name) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
fullName = name;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
var bob = new Person('Bob Ross');}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
bob.getFullName();}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s2\sb200\sa120\keepn\b\dbch\af7\dbch\af9\afs36\ab\loch\f3\fs36{{\*\bkmkstart __RefHeading___Toc1331_4188632738}{\*\bkmkend __RefHeading___Toc1331_4188632738}\rtlch \ltrch\loch
Map the Debris}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
Return a new array that transforms the elements' average altitude into their orbital periods (in seconds).}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The array will contain objects in the format }{\cs18\dbch\af8\dbch\af5\loch\f5\rtlch \ltrch\loch
\{name: 'name', avgAlt: avgAlt\}}{\rtlch \ltrch\loch
.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
You can read about orbital periods }{{\field{\*\fldinst HYPERLINK "http://en.wikipedia.org/wiki/Orbital_period" \\t "_blank" }{\fldrslt {\cf9\ul\ulc0\langfe255\alang255\lang255\rtlch \ltrch\loch
on Wikipedia}{}}}\rtlch \ltrch\loch
.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The values should be rounded to the nearest whole number. The body being orbited is Earth.}
\par \pard\plain \s25\sl276\slmult1\sb0\sa140{\rtlch \ltrch\loch
The radius of the earth is 6367.4447 kilometers, and the GM value of earth is 398600.4418 km}{{\*\updnprop8000}\up8\rtlch \ltrch\loch
3}{\rtlch \ltrch\loch
s}{{\*\updnprop8000}\up8\rtlch \ltrch\loch
-2}{\rtlch \ltrch\loch
.}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function orbitalPeriod(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var GM = 398600.4418;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
 }{\cf17\rtlch \ltrch
 }{\cf17\rtlch \ltrch\loch
var earthRadius = 6367.4447;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var a = 2 * Math.PI;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var newArr = [];}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
var getOrbPeriod = function(obj) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var c = Math.pow(earthRadius + obj.avgAlt, 3);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var b = Math.sqrt(c / GM);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
var orbPeriod = Math.round(a * b);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
delete obj.avgAlt;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
obj.orbitalPeriod = orbPeriod;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
return obj;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\};}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
for (var elem in arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
    }{\cf17\rtlch \ltrch\loch
newArr.push(getOrbPeriod(arr[elem]));}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\cf17\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\cf17\rtlch \ltrch
  }{\cf17\rtlch \ltrch\loch
return newArr;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
orbitalPeriod([\{name : "sputnik", avgAlt : 35873.5553\}]);}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function orbitalPeriod(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
var GM = 398600.4418;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
var earthRadius = 6367.4447;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
//Looping through each key in arr object}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
for(var prop in arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
//Rounding off the orbital period value}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
var orbitalPer = Math.round(2 * Math.PI * Math.sqrt(Math.pow(arr[prop].avgAlt + earthRadius, 3) / GM));}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
//deleting the avgAlt property}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
delete arr[prop].avgAlt;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
//adding orbitalPeriod property}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
arr[prop].orbitalPeriod = orbitalPer;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return arr;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
or:}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
function orbitalPeriod(arr) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
var GM = 398600.4418;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
var earthRadius = 6367.4447;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
// Loop through each item in the array arr}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
arr.forEach(function(item) \{}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
// Calculate the Orbital period value}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
var tmp = Math.round(2 * Math.PI * Math.sqrt(Math.pow(earthRadius + item.avgAlt, 3) / GM));}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
//Delete the avgAlt property}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
delete item.avgAlt;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
//Add orbitalPeriod property}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
item.orbitalPeriod = tmp;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\});}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return arr;}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\widctlpar\hyphpar0\aspalpha\ltrpar\cf0\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033\rtlch \ltrch\loch

\par }